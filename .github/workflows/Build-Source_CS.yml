name: Build and Source

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: |
          是否启用SSH连接?
        required: false
        default: false
        type: boolean
      
      version:
        description: |
          选择 OpenWrt 版本
        required: false
        default: "23.05.5"
        type: choice
        options:
          - 23.05.5
          - 24.10.0
      
      source_name:
        description: |
          选择编译源码
        required: false
        default: "all"
        type: choice
        options:
          - all
          - api
          - wxpusher
          - openssl.cgi
          - v2ray.cgi
          - netlink

env:
  CACHE_PATH: ~/.cache
  PACKAGE_NAME: ${{ inputs.source_name }}
  SOURCE: OpenWrt/${{ inputs.Source_name }}/
  Download_URL: https://downloads.openwrt.org/releases/${{ inputs.Version }}/targets
  TZ: Asia/Shanghai
  UPLOAD_BIN_DIR: true

jobs:
  jod_time:
    name: Acquisition Time
    runs-on: ubuntu-latest
    outputs:
      time: ${{steps.output_time.outputs.time}}
    steps: 
      - name: output Time
        id: output_time
        run: |
          sudo timedatectl set-timezone "${TZ}"
          echo "time=$(date "+%Y.%m.%d_%H%M%S")" >> $GITHUB_OUTPUT

  jod_release:
    name: Build for ${{ matrix.arch }}
    needs: jod_time
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64_generic
            toolchain_url_path: layerscape/armv8_64b
            toolchain_name: -toolchain-.*-armv8_64b_
          - arch: x86_64
            toolchain_url_path: x86/64
            toolchain_name: -toolchain-.*-x86-64_

    env:
      
      SDK_NAME: ${{ matrix.toolchain_name }}
      Time: ${{ needs.jod_time.outputs.time }}
      Build_PATH: ${{ github.workspace }}/Build
      SDK_URL_PATH: ${{ matrix.toolchain_url_path }}
    steps: 
      - name: Checkout
        uses: actions/checkout@main
        
      - name: Setup Cache
        uses: actions/cache@main
        with:
          path: |
            ${{ env.CACHE_PATH }}
          key: ${{ matrix.arch }}-${{ env.version }}Cache
          restore-keys: |
            ${{ env.CACHE_PATH }}/sdk
            ${{ env.CACHE_PATH }}/dl
            ${{ env.CACHE_PATH }}/feeds
      
      - name: Install Dependencies
        run: |
          # DEBIAN_FRONTEND=noninteractive sudo apt-get install -y ccache gettext libncurses5-dev xsltproc
          sudo apt-get remove gcc g++
      
      - name: Create Directories
        run: |
          CACHE_SDK_PATH="$(eval echo "${{ env.CACHE_PATH }}/sdk")"
          CACHE_DL_PATH="$(eval echo "${{ env.CACHE_PATH }}/dl")"
          CACHE_FEEDS_PATH="$(eval echo "${{ env.CACHE_PATH }}/feeds")"
          echo "缓存SDK目录: $CACHE_SDK_PATH"
          echo "缓存DL目录: $CACHE_DL_PATH"
          echo "缓存FEEDS目录: $CACHE_FEEDS_PATH"
          test -d "$CACHE_SDK_PATH" || mkdir -p "$CACHE_SDK_PATH"
          test -d "$CACHE_FEEDS_PATH" || mkdir -p "$CACHE_FEEDS_PATH"
          test -d "${{ env.Build_PATH }}" || mkdir -p "${{ env.Build_PATH }}"
          echo "CACHE_SDK_PATH=$CACHE_SDK_PATH" >> $GITHUB_ENV
          echo "CACHE_DL_PATH=$CACHE_DL_PATH" >> $GITHUB_ENV
          echo "CACHE_FEEDS_PATH=$CACHE_FEEDS_PATH" >> $GITHUB_ENV
          echo "SOURCE_PATH=$(mktemp -d)" >> $GITHUB_ENV
          
      - name: Download and Unzip ToolChain
        id: toolchain
        run: |
          cd "${{ env.CACHE_PATH }}"
          if [[ $(du -s "${{ env.CACHE_PATH }}" | awk '{ print $1}') -ge 6350 ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else if [[ $(curl -s -o /dev/null -w "%{http_code}" -X GET ${Download_URL}/${SDK_URL_PATH}) -lt 400 ]]; then
            if ! ( wget -qO- "${Download_URL}/${SDK_URL_PATH}/sha256sums" | grep -- "${{ env.SDK_NAME }}" > sha256sums.small 2>/dev/null ) ; then
              echo "在sha256sums中找不到${{ env.SDK_NAME }}文件"
            else
              SDK_FILE="$(cat sha256sums.small | cut -d' ' -f2 | sed 's/*//g')"
              if ! sha256sum -c ./sha256sums.small >/dev/null 2>&1 ; then
                wget -qO "${SDK_FILE}" "${Download_URL}/${SDK_URL_PATH}/${SDK_FILE}" --show-progress
                if ! sha256sum -c ./sha256sums.small >/dev/null 2>&1 ; then
                  echo "无法验证SDK！"
                else
                  tar -I zstd -xf "${SDK_FILE}" -C "${{ env.CACHE_SDK_PATH }}" --strip=1
                  # find "${{ env.CACHE_SDK_PATH }}" -type l -name "*-linux-g++" -exec echo {} \;
                  # echo "CXX=$(find "${{ env.CACHE_SDK_PATH }}" -type l -name "*-linux-g++")" >> $GITHUB_ENV
                  # find "${{ env.CACHE_SDK_PATH }}" -type l -name "*-linux-gcc" -exec echo {} \;
                  echo "CC=$(find "${{ env.CACHE_SDK_PATH }}" -type l -name "*-linux-gcc" | xargs -i basename {})" >> $GITHUB_ENV
                  echo "CXX=$(find "${{ env.CACHE_SDK_PATH }}" -type l -name "*-linux-g++" | xargs -i basename {})" >> $GITHUB_ENV
                  BIN=$(find "${{ env.CACHE_SDK_PATH }}" -type l -name "*-linux-g++" -exec readlink -f {} \; | xargs -i dirname {})
                  sudo sed -i '$a\PATH=$PATH:'"${BIN}" /etc/profile
                  sudo sed -i '$a\STAGING_DIR='"${BIN}" /etc/profile
                  sudo sed -i '$a\export STAGING_DIR' /etc/profile
                  echo "status=success" >> $GITHUB_OUTPUT
                fi
              fi   
            fi  
            fi
          fi  
          cd -

      - name: Download and Source
        id: source
        if: steps.images.outputs.toolchain == 'success'
        env:
          OPENWRT_GOLANG_COMMIT: ${{ secrets.OPENWRT_GOLANG_COMMIT }}
        run: |
          cd "${{ env.SOURCE_PATH }}"
          git clone https://3wlh:${{ secrets.TOKEN_3WLH }}@github.com/3wlh/Source
          test -d "Source/C++/OpenWrt" && mv Source/C++/OpenWrt ./
          test -d "OpenWrt" && rm -rf Source
          # ${{ env.CXX }} -v
          # ${{ env.CC }} -v
          echo "status=success" >> $GITHUB_OUTPUT
          cd -
        
      - name: Build and Source
        id: build
        if: steps.images.outputs.source == 'success'
        run: |
          source /etc/profile
          cd "${{ env.SOURCE_PATH }}/${{ env.SOURCE }}"
          CPP=$(find . -type f -name "*.cpp" -exec basename {} \;)
          echo ${CPP}
          if [ -n "$CPP" ]; then
            # ${{ env.CXX }} -fsigned-char ${CPP} -o ${{ env.Build_PATH }}/${{ env.PACKAGE_NAME }}-${{ matrix.arch }}
            # 优化大小
            ${{ env.CXX }} -Os ${CPP} -o ${{ env.Build_PATH }}/${{ env.PACKAGE_NAME }}-${{ matrix.arch }}
            # ${{ env.CXX }} ${CPP} -o ${{ env.Build_PATH }}/${{ env.PACKAGE_NAME }}-${{ matrix.arch }}
          else
            C=$(find . -type f -name "*.c" -exec basename {} \;)
            echo ${C}
            ${{ env.CC }} -Os ${C} -o ${{ env.Build_PATH }}/${{ env.PACKAGE_NAME }}-${{ matrix.arch }}  
          fi
          echo "status=success" >> $GITHUB_OUTPUT
          cd -

      - name: Create Edit info
        run: |
          echo "## 编译时间：\`${{ env.time }}\`" > info.md
          echo "## [![Github](https://img.shields.io/badge/Release文件可在国内加速站下载-FC7C0D?logo=github&logoColor=fff&labelColor=000&style=for-the-badge)](https://ghproxy.net/)" >> info.md
          echo "## 软件信息：" >> info.md
          echo "* SDK版本 \`${{ inputs.version }}\`" >> info.md

      - name: Upload to bin directory
        uses: actions/upload-artifact@main
        if: steps.images.outputs.source == 'success' && ${{env.UPLOAD_BIN_DIR}} == 'true'
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ matrix.arch }}_${{ env.Time }}
          path: ${{ env.Build_PATH }} 

      - name: Upload to Release
        if: steps.images.outputs.source == 'success'
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.Time }}
          body_path: info.md
          files: ${{ env.Build_PATH }}/*

      - name: SSH connection to Actions
        if: (inputs.ssh == true) || contains(github.event.action, 'ssh')
        uses: mxschmitt/action-tmate@v3  

  jod_notify:
    name: Notify Release Publish
    runs-on: ubuntu-latest
    env:
      TRIGGER_URL: ${{ secrets.TRIGGER_URL }}
      TRIGGER_TOKEN: ${{ secrets.TRIGGER_TOKEN }}
    needs: jod_release
    steps:
      - name: Notify Jenkins
        run: |
          if [ -z "$TRIGGER_URL" ] ; then
            echo "::warning::No trigger url found, skip..."
            exit 0
          fi
          curl -X POST \
              -H "Content-Type: application/json; charset=utf-8" \
              -H "Authorization: Bearer $TRIGGER_TOKEN" \
              -d "{\"event\":\"release\",\"repository\":\"${{ github.repository }}\",\"ref\":\"${{ github.ref }}\"}" \
              "$TRIGGER_URL" || true
