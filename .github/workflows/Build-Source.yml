name: Build and Source

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: false
        type: boolean
      
      Version:
        description: "Select the Version"
        required: false
        default: "23.05.5"
        type: choice
        options:
          - 23.05.5
          - 24.10.0
      
      Source_name:
        description: "Select the Source"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - api
          - wxpusher
          - openssl_cgi
          - v2ray_cgi
          - netlink

env:
  PACKAGE_NAME: ${{ inputs.Source_name }}
  Source_DIR: OpenWrt/${{ inputs.Source_name }}/
  Download_URL: "https://downloads.openwrt.org/releases/${{ inputs.Version }}/targets"
  CACHE_DIR: ~/cache
  TZ: Asia/Shanghai
  UPLOAD_BIN_DIR: true

jobs:
  jod_time:
    name: Acquisition Time
    runs-on: ubuntu-latest
    outputs:
      time: ${{steps.output_time.outputs.time}}
    steps: 
      - name: output Time
        id: output_time
        run: |
          sudo timedatectl set-timezone "${TZ}"
          echo "time=$(date "+%Y.%m.%d_%H%M%S")" >> $GITHUB_OUTPUT

  jod_release:
    name: Build for ${{ matrix.arch }}
    needs: jod_time
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64_generic
            toolchain_url_path: layerscape/armv8_64b
            toolchain_name: -toolchain-.*-armv8_64b_
          - arch: x86_64
            toolchain_url_path: x86/64
            toolchain_name: -toolchain-.*-x86-64_

    env:
      SDK_URL_PATH: ${{ matrix.toolchain_url_path }}
      SDK_NAME: ${{ matrix.toolchain_name }}
      Time: ${{ needs.jod_time.outputs.time }}
      APP_DIR: ${{ github.workspace }}/APP
      CONFIG_CCACHE: y
    steps: 
      - name: Checkout
        uses: actions/checkout@main

      - name: Install Dependencies
        run: |
          # DEBIAN_FRONTEND=noninteractive sudo apt-get install -y ccache gettext libncurses5-dev xsltproc
          sudo apt-get remove gcc g++

      - name: Setup Cache
        uses: actions/cache@main
        with:
          path: |
            ${{ env.CACHE_DIR }}
          key: openwrt-${{ matrix.arch }}-${{ env.Time }}
          restore-keys: |
            openwrt-${{ matrix.arch }}-

      - name: Create Directories
        run: |
          CACHE_DIR_SDK="$(eval echo "$CACHE_DIR/sdk")"
          CACHE_DIR_DL="$(eval echo "$CACHE_DIR/dl")"
          CACHE_DIR_FEEDS="$(eval echo "$CACHE_DIR/feeds")"
          echo "CACHE_DIR_SDK: $CACHE_DIR_SDK"
          echo "CACHE_DIR_DL: $CACHE_DIR_DL"
          echo "CACHE_DIR_FEEDS: $CACHE_DIR_FEEDS"
          test -d "$CACHE_DIR_SDK" || mkdir -p "$CACHE_DIR_SDK"
          test -d "$CACHE_DIR_FEEDS" || mkdir -p "$CACHE_DIR_FEEDS"
          test -d "${{ env.APP_DIR }}" || mkdir -p "${{ env.APP_DIR }}"
          echo "CACHE_DIR_SDK=$CACHE_DIR_SDK" >> $GITHUB_ENV
          echo "CACHE_DIR_DL=$CACHE_DIR_DL" >> $GITHUB_ENV
          echo "CACHE_DIR_FEEDS=$CACHE_DIR_FEEDS" >> $GITHUB_ENV
          echo "SDK_HOME=$(mktemp -d)" >> $GITHUB_ENV

      - name: Download and Unzip ToolChain
        run: |
          cd "$CACHE_DIR_SDK"
          if ! ( wget -q -O - "${Download_URL}/${SDK_URL_PATH}/sha256sums" | grep -- "${{ env.SDK_NAME }}" > sha256sums.small 2>/dev/null ) ; then
            echo "::error::Can not find ${{ env.SDK_NAME }} file in sha256sums."
            exit 1
          fi
          SDK_FILE="$(cat sha256sums.small | cut -d' ' -f2 | sed 's/*//g')"
          if ! sha256sum -c ./sha256sums.small >/dev/null 2>&1 ; then
            wget -q -O "$SDK_FILE" "${Download_URL}/${SDK_URL_PATH}/${SDK_FILE}"
            if ! sha256sum -c ./sha256sums.small >/dev/null 2>&1 ; then
              echo "::error::SDK can not be verified!"
              exit 1
            fi
          fi
          cd -
          file "$CACHE_DIR_SDK/$SDK_FILE"
          # tar -I zstd -xvf "$CACHE_DIR_SDK/$SDK_FILE" -C "${{ env.SDK_HOME }}" --strip=1
          tar -I zstd -xf "$CACHE_DIR_SDK/$SDK_FILE" -C "${{ env.SDK_HOME }}" --strip=1
          cd "${{ env.SDK_HOME }}"
          # find "${{ env.SDK_HOME }}" -type l -name "*-linux-g++" -exec echo {} \;
          # echo "CXX=$(find "${{ env.SDK_HOME }}" -type l -name "*-linux-g++")" >> $GITHUB_ENV
          # find "${{ env.SDK_HOME }}" -type l -name "*-linux-gcc" -exec echo {} \;
          echo "CC=$(find "${{ env.SDK_HOME }}" -type l -name "*-linux-gcc" | xargs -i basename {})" >> $GITHUB_ENV
          echo "CXX=$(find "${{ env.SDK_HOME }}" -type l -name "*-linux-g++" | xargs -i basename {})" >> $GITHUB_ENV
          BIN=$(find "${{ env.SDK_HOME }}" -type l -name "*-linux-g++" -exec readlink -f {} \; | xargs -i dirname {})
          sudo sed -i '$a\PATH=$PATH:'"${BIN}" /etc/profile
          sudo sed -i '$a\STAGING_DIR='"${BIN}" /etc/profile
          sudo sed -i '$a\export STAGING_DIR' /etc/profile
          cd -

      - name: Download and Source
        env:
          OPENWRT_GOLANG_COMMIT: ${{ secrets.OPENWRT_GOLANG_COMMIT }}
        run: |
          cd "${{ env.SDK_HOME }}"
          git clone https://3wlh:${{ secrets.TOKEN_3WLH }}@github.com/3wlh/Source
          test -d "Source/C++/OpenWrt" && mv Source/C++/OpenWrt ./
          test -d "OpenWrt" && rm -rf Source
          # ${{ env.CXX }} -v
          # ${{ env.CC }} -v
          cd -
        
      - name: Build Source
        run: |
          source /etc/profile
          cd "${{ env.SDK_HOME }}/${{ env.Source_DIR }}"
          CPP=$(find . -type f -name "*.cpp" -exec basename {} \;)
          echo ${CPP}
          if [ -n "$CPP" ]; then
            # ${{ env.CXX }} -fsigned-char ${CPP} -o ${{ env.APP_DIR }}/${{ env.PACKAGE_NAME }}-${{ matrix.arch }}
            # 优化大小
            ${{ env.CXX }} -Os ${CPP} -o ${{ env.APP_DIR }}/${{ env.PACKAGE_NAME }}-${{ matrix.arch }}
            # ${{ env.CXX }} ${CPP} -o ${{ env.APP_DIR }}/${{ env.PACKAGE_NAME }}-${{ matrix.arch }}
          else
            C=$(find . -type f -name "*.c" -exec basename {} \;)
            echo ${C}
            ${{ env.CC }} -Os ${C} -o ${{ env.APP_DIR }}/${{ env.PACKAGE_NAME }}-${{ matrix.arch }}  
          fi
          cd -

      - name: Copy Bin Files
        run: |
          touch release.txt
          echo ${{ inputs.Version }} > release.txt

      - name: Upload to bin directory
        uses: actions/upload-artifact@main
        if: ${{env.UPLOAD_BIN_DIR}} == 'true'
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ matrix.arch }}_${{ env.Time }}
          path: ${{ env.APP_DIR }} 

      - name: Upload to Release
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.Time }}
          body_path: release.txt
          files: ${{ env.APP_DIR }}/*

      - name: SSH connection to Actions
        if: (inputs.ssh == true) || contains(github.event.action, 'ssh')
        uses: mxschmitt/action-tmate@v3  

  jod_notify:
    name: Notify Release Publish
    runs-on: ubuntu-latest
    env:
      TRIGGER_URL: ${{ secrets.TRIGGER_URL }}
      TRIGGER_TOKEN: ${{ secrets.TRIGGER_TOKEN }}
    needs: jod_release
    steps:
      - name: Notify Jenkins
        run: |
          if [ -z "$TRIGGER_URL" ] ; then
            echo "::warning::No trigger url found, skip..."
            exit 0
          fi
          curl -X POST \
              -H "Content-Type: application/json; charset=utf-8" \
              -H "Authorization: Bearer $TRIGGER_TOKEN" \
              -d "{\"event\":\"release\",\"repository\":\"${{ github.repository }}\",\"ref\":\"${{ github.ref }}\"}" \
              "$TRIGGER_URL" || true
